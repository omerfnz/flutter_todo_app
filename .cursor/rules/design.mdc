---
alwaysApply: true
---

# Design Document

## Overview

The Flutter Todo application "Görev Yöneticisi" is designed as a modern, dark-mode-only task management application following strict architectural patterns. The application implements a clean architecture approach with clear separation of concerns using BLoC for state management, GetIt for dependency injection, Hive for local storage, and AutoRoute for navigation. The design emphasizes maintainability, testability, and scalability while providing a smooth user experience with Material 3 design principles.

## Architecture

### High-Level Architecture

The application follows a layered architecture pattern:

```
┌─────────────────────────────────────┐
│           Presentation Layer        │
│  (Views, Widgets, BLoC Consumers)   │
├─────────────────────────────────────┤
│          Business Logic Layer       │
│     (BLoC, Events, States)          │
├─────────────────────────────────────┤
│            Service Layer            │
│    (TodoService, Cache Manager)     │
├─────────────────────────────────────┤
│            Data Layer               │
│      (Models, Hive Storage)         │
└─────────────────────────────────────┘
```

### Folder Structure

```
lib/
├── core/
│   ├── constants/
│   │   ├── app_constants.dart
│   │   └── cache_constants.dart
│   └── extensions/
│       └── build_context_extension.dart
├── feature/
│   └── todo/
│       ├── view/
│       │   ├── todo_list_view.dart
│       │   └── widgets/
│       │       ├── todo_list_item_card.dart
│       │       └── add_todo_dialog.dart
│       ├── view_model/
│       │   ├── todo_bloc.dart
│       │   ├── todo_event.dart
│       │   └── todo_state.dart
│       └── model/
│           └── todo_model.dart
├── product/
│   ├── init/
│   │   ├── application_initialize.dart
│   │   ├── localization_initialize.dart
│   │   ├── theme_initialize.dart
│   │   └── dependency_initialize.dart
│   ├── navigation/
│   │   └── app_router.dart
│   ├── service/
│   │   └── todo_service.dart
│   ├── cache/
│   │   └── todo_cache_manager.dart
│   └── widget/
│       └── common_elevated_button.dart
└── main.dart
```

## Components and Interfaces

### Data Layer

#### TodoModel
- **Purpose**: Represents a todo item with persistence capabilities
- **Fields**: 
  - `id`: String (unique identifier)
  - `title`: String (task description)
  - `isCompleted`: bool (completion status)
- **Annotations**: 
  - `@JsonSerializable()` for JSON serialization
  - `@HiveType(typeId: 0)` for Hive storage
  - `@HiveField()` for each field
- **Methods**: `fromJson()`, `toJson()`, `copyWith()`, equality operators

#### TodoCacheManager
- **Purpose**: Abstracts Hive storage operations
- **Methods**:
  - `Future<List<TodoModel>> getAllTodos()`
  - `Future<void> saveTodo(TodoModel todo)`
  - `Future<void> updateTodo(TodoModel todo)`
  - `Future<void> deleteTodo(String id)`
  - `Future<void> clearAllTodos()`
- **Dependencies**: Hive box management

### Service Layer

#### TodoService
- **Purpose**: Business logic layer for todo operations
- **Methods**:
  - `Future<List<TodoModel>> loadTodos()`
  - `Future<void> addTodo(String title)`
  - `Future<void> toggleTodoCompletion(String id)`
  - `Future<void> deleteTodo(String id)`
- **Dependencies**: TodoCacheManager

### Business Logic Layer

#### TodoState
```dart
class TodoState extends Equatable {
  final bool isLoading;
  final List<TodoModel> todos;
  final String? error;
  
  TodoState copyWith({
    bool? isLoading,
    List<TodoModel>? todos,
    String? error,
  });
}
```

#### TodoEvent
- `LoadTodos`: Triggers loading of all todos
- `AddTodo`: Adds a new todo with title
- `UpdateTodo`: Updates existing todo (toggle completion)
- `DeleteTodo`: Removes a todo by ID

#### TodoBloc
- **Purpose**: Manages todo state and handles events
- **State Management**: Emits appropriate states based on events
- **Error Handling**: Catches and emits error states
- **Dependencies**: TodoService

### Presentation Layer

#### TodoListView
- **Purpose**: Main screen displaying todo list
- **Components**:
  - `BlocBuilder<TodoBloc, TodoState>` for state management
  - `ListView.builder` for todo list rendering
  - `FloatingActionButton` for adding new todos
  - Empty state message when no todos exist
  - Loading indicator during operations

#### TodoListItemCard
- **Purpose**: Individual todo item display
- **Features**:
  - Checkbox for completion toggle
  - Strikethrough text for completed items
  - `Dismissible` wrapper for swipe-to-delete
  - Material 3 card design

#### AddTodoDialog
- **Purpose**: Modal for adding new todos
- **Components**:
  - `TextField` for todo title input
  - `CommonElevatedButton` for save action
  - Form validation
  - Localized text

#### CommonElevatedButton
- **Purpose**: Reusable button component
- **Features**:
  - Loading state management
  - Consistent styling
  - Accessibility support

## Data Models

### TodoModel Structure
```dart
@JsonSerializable()
@HiveType(typeId: 0)
class TodoModel extends Equatable {
  @HiveField(0)
  final String id;
  
  @HiveField(1)
  final String title;
  
  @HiveField(2)
  final bool isCompleted;
  
  // Constructor, methods, and equality implementation
}
```

### State Models
```dart
class TodoState extends Equatable {
  final bool isLoading;
  final List<TodoModel> todos;
  final String? error;
  
  // Initial state: TodoState(isLoading: false, todos: [], error: null)
  // Loading state: TodoState(isLoading: true, todos: currentTodos, error: null)
  // Success state: TodoState(isLoading: false, todos: updatedTodos, error: null)
  // Error state: TodoState(isLoading: false, todos: currentTodos, error: errorMessage)
}
```

## Error Handling

### Error Types
1. **Storage Errors**: Hive initialization or operation failures
2. **Validation Errors**: Empty todo titles or invalid data
3. **State Errors**: BLoC state management issues

### Error Handling Strategy
- **Service Layer**: Catch and wrap exceptions with meaningful messages
- **BLoC Layer**: Emit error states with localized error messages
- **UI Layer**: Display user-friendly error messages using SnackBar or AlertDialog
- **Logging**: Use Flutter's debugPrint for development debugging

### Error Recovery
- Retry mechanisms for transient failures
- Graceful degradation when storage is unavailable
- User feedback for permanent failures

## Testing Strategy

### Unit Tests
- **TodoModel**: Test serialization, deserialization, and equality
- **TodoCacheManager**: Mock Hive operations and test CRUD functionality
- **TodoService**: Test business logic with mocked dependencies
- **TodoBloc**: Test state transitions using bloc_test package

### Widget Tests
- **TodoListView**: Test rendering of different states (loading, empty, populated)
- **TodoListItemCard**: Test completion toggle and dismissible actions
- **AddTodoDialog**: Test form validation and submission

### Integration Tests
- End-to-end user flows
- Storage persistence across app restarts
- Localization switching

### Test Structure
```dart
// Example BLoC test structure
group('TodoBloc', () {
  late TodoBloc todoBloc;
  late MockTodoService mockTodoService;
  
  setUp(() {
    mockTodoService = MockTodoService();
    todoBloc = TodoBloc(todoService: mockTodoService);
  });
  
  blocTest<TodoBloc, TodoState>(
    'emits [loading, success] when AddTodo succeeds',
    build: () => todoBloc,
    act: (bloc) => bloc.add(AddTodo('Test todo')),
    expect: () => [
      TodoState(isLoading: true, todos: [], error: null),
      TodoState(isLoading: false, todos: [testTodo], error: null),
    ],
  );
});
```

## Theme and UI Design

### Dark Theme Configuration
```dart
ThemeData get darkTheme => ThemeData.dark().copyWith(
  colorScheme: ColorScheme.fromSeed(
    seedColor: Colors.deepPurple,
    brightness: Brightness.dark,
  ),
  appBarTheme: AppBarTheme(
    backgroundColor: Colors.grey[900],
    elevation: 0,
  ),
  cardTheme: CardTheme(
    color: Colors.grey[800],
    elevation: 2,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  floatingActionButtonTheme: FloatingActionButtonThemeData(
    backgroundColor: Colors.deepPurple,
  ),
);
```

### Material 3 Components
- Use Material 3 design tokens
- Consistent spacing and typography
- Proper elevation and shadows
- Accessible color contrasts

## Navigation Design

### AutoRoute Configuration
```dart
@AutoRouterConfig()
class AppRouter extends _$AppRouter {
  @override
  List<AutoRoute> get routes => [
    AutoRoute(
      page: TodoListRoute.page,
      path: '/',
      initial: true,
    ),
  ];
}
```

### Route Management
- Single main route for todo list
- Modal dialogs for add/edit operations
- Future extensibility for additional screens

## Localization Design

### Translation Structure
```json
{
  "app": {
    "title": "Görev Yöneticisi"
  },
  "todos": {
    "add": "Yeni Görev Ekle",
    "empty": "Harika! Hiç görevin kalmamış.",
    "hint": "Ne yapman gerekiyor?"
  },
  "general": {
    "save": "Kaydet",
    "cancel": "İptal",
    "error": "Bir hata oluştu. Lütfen tekrar deneyin."
  }
}
```

### Localization Implementation
- EasyLocalization package integration
- Asset-based translation files
- Context extension for easy access
- Fallback language support

## Dependency Injection Design

### GetIt Configuration
```dart
class DependencyInitialize {
  static Future<void> setup() async {
    // Register cache manager
    GetIt.instance.registerLazySingleton<TodoCacheManager>(
      () => TodoCacheManager(),
    );
    
    // Register service
    GetIt.instance.registerLazySingleton<TodoService>(
      () => TodoService(GetIt.instance<TodoCacheManager>()),
    );
    
    // Register BLoC
    GetIt.instance.registerFactory<TodoBloc>(
      () => TodoBloc(GetIt.instance<TodoService>()),
    );
  }
}
```

### Dependency Graph
- TodoBloc depends on TodoService
- TodoService depends on TodoCacheManager
- TodoCacheManager depends on Hive
- All dependencies registered as singletons except BLoC (factory)

## Performance Considerations

### Optimization Strategies
- Lazy loading of dependencies
- Efficient ListView.builder for large lists
- Minimal rebuilds with BlocBuilder
- Proper disposal of resources

### Memory Management
- Automatic BLoC disposal
- Hive box management
- Stream subscription cleanup

### Build Performance
- Code generation for repetitive code
- Tree shaking for unused dependencies
- Minimal widget rebuilds# Design Document

## Overview

The Flutter Todo application "Görev Yöneticisi" is designed as a modern, dark-mode-only task management application following strict architectural patterns. The application implements a clean architecture approach with clear separation of concerns using BLoC for state management, GetIt for dependency injection, Hive for local storage, and AutoRoute for navigation. The design emphasizes maintainability, testability, and scalability while providing a smooth user experience with Material 3 design principles.

## Architecture

### High-Level Architecture

The application follows a layered architecture pattern:

```
┌─────────────────────────────────────┐
│           Presentation Layer        │
│  (Views, Widgets, BLoC Consumers)   │
├─────────────────────────────────────┤
│          Business Logic Layer       │
│     (BLoC, Events, States)          │
├─────────────────────────────────────┤
│            Service Layer            │
│    (TodoService, Cache Manager)     │
├─────────────────────────────────────┤
│            Data Layer               │
│      (Models, Hive Storage)         │
└─────────────────────────────────────┘
```

### Folder Structure

```
lib/
├── core/
│   ├── constants/
│   │   ├── app_constants.dart
│   │   └── cache_constants.dart
│   └── extensions/
│       └── build_context_extension.dart
├── feature/
│   └── todo/
│       ├── view/
│       │   ├── todo_list_view.dart
│       │   └── widgets/
│       │       ├── todo_list_item_card.dart
│       │       └── add_todo_dialog.dart
│       ├── view_model/
│       │   ├── todo_bloc.dart
│       │   ├── todo_event.dart
│       │   └── todo_state.dart
│       └── model/
│           └── todo_model.dart
├── product/
│   ├── init/
│   │   ├── application_initialize.dart
│   │   ├── localization_initialize.dart
│   │   ├── theme_initialize.dart
│   │   └── dependency_initialize.dart
│   ├── navigation/
│   │   └── app_router.dart
│   ├── service/
│   │   └── todo_service.dart
│   ├── cache/
│   │   └── todo_cache_manager.dart
│   └── widget/
│       └── common_elevated_button.dart
└── main.dart
```

## Components and Interfaces

### Data Layer

#### TodoModel
- **Purpose**: Represents a todo item with persistence capabilities
- **Fields**: 
  - `id`: String (unique identifier)
  - `title`: String (task description)
  - `isCompleted`: bool (completion status)
- **Annotations**: 
  - `@JsonSerializable()` for JSON serialization
  - `@HiveType(typeId: 0)` for Hive storage
  - `@HiveField()` for each field
- **Methods**: `fromJson()`, `toJson()`, `copyWith()`, equality operators

#### TodoCacheManager
- **Purpose**: Abstracts Hive storage operations
- **Methods**:
  - `Future<List<TodoModel>> getAllTodos()`
  - `Future<void> saveTodo(TodoModel todo)`
  - `Future<void> updateTodo(TodoModel todo)`
  - `Future<void> deleteTodo(String id)`
  - `Future<void> clearAllTodos()`
- **Dependencies**: Hive box management

### Service Layer

#### TodoService
- **Purpose**: Business logic layer for todo operations
- **Methods**:
  - `Future<List<TodoModel>> loadTodos()`
  - `Future<void> addTodo(String title)`
  - `Future<void> toggleTodoCompletion(String id)`
  - `Future<void> deleteTodo(String id)`
- **Dependencies**: TodoCacheManager

### Business Logic Layer

#### TodoState
```dart
class TodoState extends Equatable {
  final bool isLoading;
  final List<TodoModel> todos;
  final String? error;
  
  TodoState copyWith({
    bool? isLoading,
    List<TodoModel>? todos,
    String? error,
  });
}
```

#### TodoEvent
- `LoadTodos`: Triggers loading of all todos
- `AddTodo`: Adds a new todo with title
- `UpdateTodo`: Updates existing todo (toggle completion)
- `DeleteTodo`: Removes a todo by ID

#### TodoBloc
- **Purpose**: Manages todo state and handles events
- **State Management**: Emits appropriate states based on events
- **Error Handling**: Catches and emits error states
- **Dependencies**: TodoService

### Presentation Layer

#### TodoListView
- **Purpose**: Main screen displaying todo list
- **Components**:
  - `BlocBuilder<TodoBloc, TodoState>` for state management
  - `ListView.builder` for todo list rendering
  - `FloatingActionButton` for adding new todos
  - Empty state message when no todos exist
  - Loading indicator during operations

#### TodoListItemCard
- **Purpose**: Individual todo item display
- **Features**:
  - Checkbox for completion toggle
  - Strikethrough text for completed items
  - `Dismissible` wrapper for swipe-to-delete
  - Material 3 card design

#### AddTodoDialog
- **Purpose**: Modal for adding new todos
- **Components**:
  - `TextField` for todo title input
  - `CommonElevatedButton` for save action
  - Form validation
  - Localized text

#### CommonElevatedButton
- **Purpose**: Reusable button component
- **Features**:
  - Loading state management
  - Consistent styling
  - Accessibility support

## Data Models

### TodoModel Structure
```dart
@JsonSerializable()
@HiveType(typeId: 0)
class TodoModel extends Equatable {
  @HiveField(0)
  final String id;
  
  @HiveField(1)
  final String title;
  
  @HiveField(2)
  final bool isCompleted;
  
  // Constructor, methods, and equality implementation
}
```

### State Models
```dart
class TodoState extends Equatable {
  final bool isLoading;
  final List<TodoModel> todos;
  final String? error;
  
  // Initial state: TodoState(isLoading: false, todos: [], error: null)
  // Loading state: TodoState(isLoading: true, todos: currentTodos, error: null)
  // Success state: TodoState(isLoading: false, todos: updatedTodos, error: null)
  // Error state: TodoState(isLoading: false, todos: currentTodos, error: errorMessage)
}
```

## Error Handling

### Error Types
1. **Storage Errors**: Hive initialization or operation failures
2. **Validation Errors**: Empty todo titles or invalid data
3. **State Errors**: BLoC state management issues

### Error Handling Strategy
- **Service Layer**: Catch and wrap exceptions with meaningful messages
- **BLoC Layer**: Emit error states with localized error messages
- **UI Layer**: Display user-friendly error messages using SnackBar or AlertDialog
- **Logging**: Use Flutter's debugPrint for development debugging

### Error Recovery
- Retry mechanisms for transient failures
- Graceful degradation when storage is unavailable
- User feedback for permanent failures

## Testing Strategy

### Unit Tests
- **TodoModel**: Test serialization, deserialization, and equality
- **TodoCacheManager**: Mock Hive operations and test CRUD functionality
- **TodoService**: Test business logic with mocked dependencies
- **TodoBloc**: Test state transitions using bloc_test package

### Widget Tests
- **TodoListView**: Test rendering of different states (loading, empty, populated)
- **TodoListItemCard**: Test completion toggle and dismissible actions
- **AddTodoDialog**: Test form validation and submission

### Integration Tests
- End-to-end user flows
- Storage persistence across app restarts
- Localization switching

### Test Structure
```dart
// Example BLoC test structure
group('TodoBloc', () {
  late TodoBloc todoBloc;
  late MockTodoService mockTodoService;
  
  setUp(() {
    mockTodoService = MockTodoService();
    todoBloc = TodoBloc(todoService: mockTodoService);
  });
  
  blocTest<TodoBloc, TodoState>(
    'emits [loading, success] when AddTodo succeeds',
    build: () => todoBloc,
    act: (bloc) => bloc.add(AddTodo('Test todo')),
    expect: () => [
      TodoState(isLoading: true, todos: [], error: null),
      TodoState(isLoading: false, todos: [testTodo], error: null),
    ],
  );
});
```

## Theme and UI Design

### Dark Theme Configuration
```dart
ThemeData get darkTheme => ThemeData.dark().copyWith(
  colorScheme: ColorScheme.fromSeed(
    seedColor: Colors.deepPurple,
    brightness: Brightness.dark,
  ),
  appBarTheme: AppBarTheme(
    backgroundColor: Colors.grey[900],
    elevation: 0,
  ),
  cardTheme: CardTheme(
    color: Colors.grey[800],
    elevation: 2,
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(12),
    ),
  ),
  floatingActionButtonTheme: FloatingActionButtonThemeData(
    backgroundColor: Colors.deepPurple,
  ),
);
```

### Material 3 Components
- Use Material 3 design tokens
- Consistent spacing and typography
- Proper elevation and shadows
- Accessible color contrasts

## Navigation Design

### AutoRoute Configuration
```dart
@AutoRouterConfig()
class AppRouter extends _$AppRouter {
  @override
  List<AutoRoute> get routes => [
    AutoRoute(
      page: TodoListRoute.page,
      path: '/',
      initial: true,
    ),
  ];
}
```

### Route Management
- Single main route for todo list
- Modal dialogs for add/edit operations
- Future extensibility for additional screens

## Localization Design

### Translation Structure
```json
{
  "app": {
    "title": "Görev Yöneticisi"
  },
  "todos": {
    "add": "Yeni Görev Ekle",
    "empty": "Harika! Hiç görevin kalmamış.",
    "hint": "Ne yapman gerekiyor?"
  },
  "general": {
    "save": "Kaydet",
    "cancel": "İptal",
    "error": "Bir hata oluştu. Lütfen tekrar deneyin."
  }
}
```

### Localization Implementation
- EasyLocalization package integration
- Asset-based translation files
- Context extension for easy access
- Fallback language support

## Dependency Injection Design

### GetIt Configuration
```dart
class DependencyInitialize {
  static Future<void> setup() async {
    // Register cache manager
    GetIt.instance.registerLazySingleton<TodoCacheManager>(
      () => TodoCacheManager(),
    );
    
    // Register service
    GetIt.instance.registerLazySingleton<TodoService>(
      () => TodoService(GetIt.instance<TodoCacheManager>()),
    );
    
    // Register BLoC
    GetIt.instance.registerFactory<TodoBloc>(
      () => TodoBloc(GetIt.instance<TodoService>()),
    );
  }
}
```

### Dependency Graph
- TodoBloc depends on TodoService
- TodoService depends on TodoCacheManager
- TodoCacheManager depends on Hive
- All dependencies registered as singletons except BLoC (factory)

## Performance Considerations

### Optimization Strategies
- Lazy loading of dependencies
- Efficient ListView.builder for large lists
- Minimal rebuilds with BlocBuilder
- Proper disposal of resources

### Memory Management
- Automatic BLoC disposal
- Hive box management
- Stream subscription cleanup

### Build Performance
- Code generation for repetitive code
- Tree shaking for unused dependencies
- Minimal widget rebuilds